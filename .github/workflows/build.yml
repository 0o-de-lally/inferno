name: Build

on:
  schedule:
    - cron: "45 0 * * *" # Run at 00:45 every day
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-gpu:
    name: GPU Detection
    runs-on: ubuntu-latest
    outputs:
      cuda_available: ${{ steps.gpu.outputs.available }}
    steps:
    - name: Check for NVIDIA GPU
      id: gpu
      run: |
        if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
          echo "available=true" >> $GITHUB_OUTPUT
          echo "Physical GPU detected"
        else
          echo "available=false" >> $GITHUB_OUTPUT
          echo "No physical GPU detected"
        fi

  cuda-build:
    name: CUDA Build (Primary Target)
    runs-on: ubuntu-latest
    needs: detect-gpu
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Setup CUDA
      uses: Jimver/cuda-toolkit@v0.2.27
      with:
        cuda: '13.0.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cudart-dev", "thrust"]'

    - name: Setup cuDNN
      run: |
        # Install cuDNN using apt (compatible with CUDA 13.0)
        sudo apt-get update
        sudo apt-get -y install libcudnn9-dev

    - name: Verify CUDA Installation
      run: |
        echo "CUDA Installation Verification:"
        nvcc --version
        echo "CUDA_HOME: $CUDA_HOME"
        echo "CUDA_PATH: $CUDA_PATH"
        ls -la $CUDA_PATH/lib64/ | head -10

    - name: Build CUDA Binary
      env:
        # CUDA environment variables (set by cuda-toolkit action)
        LD_LIBRARY_PATH: "${{ env.CUDA_PATH }}/lib64:/usr/lib/x86_64-linux-gnu:${{ env.LD_LIBRARY_PATH }}"
      run: |
        echo "Building CUDA binary for production release"

        # Show environment for debugging
        echo "CUDA Environment:"
        echo "CUDA_HOME=$CUDA_HOME"
        echo "CUDA_PATH=$CUDA_PATH"
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PATH includes CUDA: $(echo $PATH | grep cuda || echo 'No CUDA in PATH')"
        nvcc --version 2>/dev/null || echo "nvcc not available"

        echo "Building CUDA backend with full development environment"
        # Build with verbose output to catch any compilation issues
        cargo build --release --features candle-cuda --verbose

    - name: Upload CUDA Binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: inferno-cuda-binary-${{ github.sha }}
        path: |
          target/release/inferno*
          !target/release/*.d
          !target/release/deps/
        retention-days: 30

